// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a CSX script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Moq;
using Moq.Language;
using Moq.Language.Flow;

namespace MaxKagamine.Moq.HttpClient
{
    public static partial class MockHttpMessageHandlerExtensions
    {
        #region SetupRequest

        /// <summary>
        /// Specifies a setup matching any request.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupAnyRequest(this Mock<HttpMessageHandler> handler)
            => handler.Setup(x => x.SendAsync(It.IsAny<HttpRequestMessage>(), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given <see cref="Uri" />.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, Uri requestUri)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUri), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given URL.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, string requestUrl)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUrl), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, Uri requestUri, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, Uri requestUri, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, string requestUrl, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUrl, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, string requestUrl, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUrl, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and <see cref="Uri" />.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Uri requestUri)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUri), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and URL.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, string requestUrl)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUrl), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUrl, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUrl, match), It.IsAny<CancellationToken>()));

        #endregion

        #region SetupRequestSequence

        /// <summary>
        /// Specifies a setup matching any request.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupAnyRequestSequence(this Mock<HttpMessageHandler> handler)
            => handler.SetupSequence(x => x.SendAsync(It.IsAny<HttpRequestMessage>(), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, Predicate<HttpRequestMessage> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, Func<HttpRequestMessage, Task<bool>> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given <see cref="Uri" />.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, Uri requestUri)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(requestUri), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given URL.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, string requestUrl)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(requestUrl), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, Uri requestUri, Predicate<HttpRequestMessage> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, Uri requestUri, Func<HttpRequestMessage, Task<bool>> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, string requestUrl, Predicate<HttpRequestMessage> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(requestUrl, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, string requestUrl, Func<HttpRequestMessage, Task<bool>> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(requestUrl, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Predicate<HttpRequestMessage> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(method, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Func<HttpRequestMessage, Task<bool>> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(method, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and <see cref="Uri" />.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Uri requestUri)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(method, requestUri), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and URL.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, HttpMethod method, string requestUrl)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(method, requestUrl), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Predicate<HttpRequestMessage> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(method, requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Func<HttpRequestMessage, Task<bool>> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(method, requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Predicate<HttpRequestMessage> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(method, requestUrl, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetupSequentialResult<Task<HttpResponseMessage>> SetupRequestSequence(
            this Mock<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Func<HttpRequestMessage, Task<bool>> match)
            => handler.SetupSequence(x => x.SendAsync(RequestMatcher.Is(method, requestUrl, match), It.IsAny<CancellationToken>()));

        #endregion

        #region InSequence().SetupRequest

        /// <summary>
        /// Specifies a setup matching any request.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupAnyRequest(this ISetupConditionResult<HttpMessageHandler> handler)
            => handler.Setup(x => x.SendAsync(It.IsAny<HttpRequestMessage>(), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given <see cref="Uri" />.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, Uri requestUri)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUri), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given URL.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, string requestUrl)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUrl), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, Uri requestUri, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, Uri requestUri, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, string requestUrl, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUrl, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, string requestUrl, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(requestUrl, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, HttpMethod method, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, HttpMethod method, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and <see cref="Uri" />.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, HttpMethod method, Uri requestUri)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUri), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and URL.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, HttpMethod method, string requestUrl)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUrl), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUri, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Predicate<HttpRequestMessage> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUrl, match), It.IsAny<CancellationToken>()));

        /// <summary>
        /// Specifies a setup for a request matching the given method and URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static ISetup<HttpMessageHandler, Task<HttpResponseMessage>> SetupRequest(
            this ISetupConditionResult<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Func<HttpRequestMessage, Task<bool>> match)
            => handler.Setup(x => x.SendAsync(RequestMatcher.Is(method, requestUrl, match), It.IsAny<CancellationToken>()));

        #endregion

        #region VerifyRequest

        /// <summary>
        /// Verifies that any request was sent.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>

        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        public static void VerifyAnyRequest(this Mock<HttpMessageHandler> handler, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(It.IsAny<HttpRequestMessage>(), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, Predicate<HttpRequestMessage> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, Func<HttpRequestMessage, Task<bool>> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given <see cref="Uri" />.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, Uri requestUri, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(requestUri), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given URL.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, string requestUrl, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(requestUrl), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, Uri requestUri, Predicate<HttpRequestMessage> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(requestUri, match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, Uri requestUri, Func<HttpRequestMessage, Task<bool>> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(requestUri, match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, string requestUrl, Predicate<HttpRequestMessage> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(requestUrl, match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, string requestUrl, Func<HttpRequestMessage, Task<bool>> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(requestUrl, match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given method as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Predicate<HttpRequestMessage> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(method, match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given method as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Func<HttpRequestMessage, Task<bool>> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(method, match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given method and <see cref="Uri" />.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(method, requestUri), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given method and URL.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(method, requestUrl), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given method and <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Predicate<HttpRequestMessage> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(method, requestUri, match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given method and <see cref="Uri" /> as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUri">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, Uri requestUri, Func<HttpRequestMessage, Task<bool>> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(method, requestUri, match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given method and URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Predicate<HttpRequestMessage> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(method, requestUrl, match), It.IsAny<CancellationToken>()), times, failMessage);

        /// <summary>
        /// Verifies that a request was sent matching the given method and URL as well as a predicate.
        /// </summary>
        /// <param name="handler">The <see cref="HttpMessageHandler" /> mock.</param>
        /// <param name="method">The <see cref="HttpRequestMessage.Method" />.</param>
        /// <param name="requestUrl">The <see cref="HttpRequestMessage.RequestUri" />.</param>
        /// <param name="match">The predicate used to match the request.</param>
        /// <param name="times">
        /// Number of times that the invocation is expected to have occurred.
        /// If omitted, assumed to be <see cref="Times.AtLeastOnce" />.
        /// </param>
        /// <param name="failMessage">Message to include in the thrown <see cref="MockException" /> if verification fails.</param>
        /// <exception cref="ArgumentNullException"><paramref name="match" /> is null.</exception>
        public static void VerifyRequest(
            this Mock<HttpMessageHandler> handler, HttpMethod method, string requestUrl, Func<HttpRequestMessage, Task<bool>> match, Times? times = null, string failMessage = null)
            => handler.Verify(x => x.SendAsync(RequestMatcher.Is(method, requestUrl, match), It.IsAny<CancellationToken>()), times, failMessage);

        #endregion
    }
}
